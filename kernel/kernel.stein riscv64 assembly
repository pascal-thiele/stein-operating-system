# The kernel allows user programs to run on multiple threads, but singles out one thread to run its own routines. Running the kernel on a single thread at a time, is often necessary, but also requires less memory.

# integer register usage
# 0 zero
# 1 return address
# 2 stack pointer
# 3 thread address
# 4 temporary
# 5 temporary
# 6 temporary
# 7 temporary
# 8 temporary
# 9 temporary
# 10 temporary
# 11 temporary
# 12 temporary
# 13 temporary
# 14 temporary
# 15 temporary
# 16 saved
# 17 saved
# 18 saved
# 19 saved
# 20 saved
# 21 saved
# 22 saved
# 23 saved
# 24 saved
# 25 saved
# 26 saved
# 27 saved
# 28 saved
# 29 saved
# 30 saved
# 31 saved

# thread byte layout
# 0 break process execution flag
# 1 -
# 8 loaded process address
# 16 integer register 1
# 24 integer register 2
# 32 integer register 3
# 40 integer register 4
# 48 integer register 5
# 56 integer register 6
# 64 integer register 7
# 72 integer register 8
# 80 integer register 9
# 88 integer register 10
# 96 integer register 11
# 104 integer register 12
# 112 integer register 13
# 120 integer register 14
# 128 integer register 15
# 136 integer register 16
# 144 integer register 17
# 152 integer register 18
# 160 integer register 19
# 168 integer register 20
# 176 integer register 21
# 184 integer register 22
# 192 integer register 23
# 200 integer register 24
# 208 integer register 25
# 216 integer register 26
# 224 integer register 27
# 232 integer register 28
# 240 integer register 29
# 248 integer register 30
# 256 integer register 31
# 264

constant fcsr 3
constant mstatus 768
constant misa 769
constant medeleg 770
constant mideleg 771
constant mie 772
constant mtvec 773
constant mcounteren 774
constant mcountinhibit 800
constant mscratch 832
constant mepc 833
constant mcause 834
constant mip 836
constant pmpcfg0 928
constant pmpaddr0 944
constant pmpaddr1 945
constant pmpaddr2 946
constant pmpaddr3 947
constant mcycle 2816
constant minstret 2818
constant mhartid 3860


# in
# 11 computer description address
label start

# check if extensions aimu are supported
csrrs 4 0 misa
lui 5 257
addi 5 5 257
and 4 4 5
beq 4 5 check_physical_memory_protection
jal 0 0

label check_physical_memory_protection
lui 4 61681
addi 4 4 -241
csrrw 0 4 pmpcfg0
csrrw 5 0 pmpcfg0
beq 4 5 check_physical_memory_protection_granularity
jal 0 0
label check_physical_memory_protection_granularity
lui 4 1
csrrw 0 4 pmpaddr0
csrrs 4 0 pmpaddr0
bne 4 0 initialize_control_and_status_registers
jal 0 0

label initialize_control_and_status_registers
# 3f007e7fea
lui 4 16128
addi 4 4 2024
slli 4 4 12
addi 4 4 -16
csrrc 0 4 mstatus
# a00000080
lui 4 10
slli 4 4 20
addi 4 4 128
csrrs 0 4 mstatus
ll 4 exception
csrrw 0 4 mtvec
csrrw 0 0 medeleg
csrrw 0 0 mideleg
csrrw 0 0 mip
addi 4 0 128
csrrw 0 4 mie
addi 4 0 -1
csrrw 0 4 mcounteren
addi 4 0 -8
#csrrw 0 4 mcountinhibit # BREAKS execution on qemu sifive_u
csrrw 0 0 mcycle
csrrw 0 0 minstret

# synchronize threads
ll 16 semaphore
lui 4 1
label register_thread_lock
amoswapd 5 16 4
bne 5 0 register_thread_lock

# load stack pointer
ll 2 stack

# register in thread list
lbu 4 thread_list_size
addi 5 0 256
bltu 4 5 register_thread_write
fence rw rw
sd 0 16 0
jal 0 0
label register_thread_write
ll 3 thread_list
addi 5 0 264
mul 5 5 4
add 3 3 5
addi 4 4 1
sb 4 thread_list_size 5
csrrw 0 3 mscratch

# The kernel needs main memory and a clock, while external memory devices are optional. If no main memory or no clock can be initialized, the memory list and clock type shall be clear, in order to allow other threads to scan hardware. Threads that failed to scan hardware check the status indefinitely, in the hope another thread succeeds to scan hardware.

# scan hardware
lbu 4 scan_hardware_status
bne 4 0 enter_user_mode
addi 17 11 0

# device tree 17
addi 4 17 0
call 1 device_tree_17_identify
bne 4 0 scan_hardware_failure
sd 17 computer_description_address 5
addi 4 17 4
call 1 device_tree_17_load_word
sd 4 computer_description_size 5
addi 18 4 0
# extract memory
addi 4 17 0
call 1 device_tree_17_memory
bne 4 0 scan_hardware_failure
ll 4 start
lui 5 512
call 1 memory_banish
addi 4 17 0
addi 5 18 0
call 1 memory_banish
# extract clock
addi 4 17 0
call 1 device_tree_17_sifive_core_local_interruptor_0
bne 4 0 scan_hardware_failure
# start processes
addi 4 17 0
call 1 device_tree_17_common_flash_interface
addi 4 17 0
call 1 device_tree_17_sifive_SPI_0_multi_media_card
addi 4 17 0
call 1 device_tree_17_sifive_SPI_0_ISSI_IS25WP032
addi 4 17 0
call 1 device_tree_17_sifive_SPI_0_ISSI_IS25WP256
addi 4 17 0
call 1 device_tree_17_sifive_SPI_0_micron_M25P80
addi 5 0 85
sb 5 scan_hardware_status 4
jal 0 enter_user_mode

# routines for other computer descriptions go here

label scan_hardware_failure
sd 0 computer_description_address 4
sd 0 computer_description_size 4
call 1 memory_clear
sd 0 clock_type 4
fence rwio rwio
sd 0 16 0
label scan_hardware_wait
ld 4 scan_hardware_status
beq 4 0 scan_hardware_wait

label enter_user_mode
call 1 process_pick
bne 4 0 enter_user_mode_load_process
label enter_user_mode_wait
fence rwio rwio
sd 0 16 0
call 1 clock_wait
lui 4 1
label enter_user_mode_lock
amoswapd 5 16 4
bne 5 0 enter_user_mode_lock
call 1 process_pick
beq 4 0 enter_user_mode_wait
label enter_user_mode_load_process
sd 4 3 8
call 1 process_load
ld 4 3 8
call 1 process_protect
call 1 clock_interrupt
fence rwio rwio
sd 0 16 0
ld 1 3 16
ld 2 3 24
# 3 last
ld 4 3 40
ld 5 3 48
ld 6 3 56
ld 7 3 64
ld 8 3 72
ld 9 3 80
ld 10 3 88
ld 11 3 96
ld 12 3 104
ld 13 3 112
ld 14 3 120
ld 15 3 128
ld 16 3 136
ld 17 3 144
ld 18 3 152
ld 19 3 160
ld 20 3 168
ld 21 3 176
ld 22 3 184
ld 23 3 192
ld 24 3 200
ld 25 3 208
ld 26 3 216
ld 27 3 224
ld 28 3 232
ld 29 3 240
ld 30 3 248
ld 31 3 256
ld 3 3 32
mret


label thread_list_size
byte 0

label scan_hardware_status
byte 0 # pending if zero

align 8

label semaphore
doubleword 0 # unlocked if zero

label computer_description_address
doubleword 0

label computer_description_size
doubleword 0

zero 8184
label stack
doubleword 0

label thread_list
zero 67584 # 256 threads